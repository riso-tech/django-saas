/**
 * FormValidation (https://formvalidation.io)
 * The best validation library for JavaScript
 * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>
 *
 * @license https://formvalidation.io/license
 * @package @form-validation/plugin-auto-focus
 * @version 2.0.2
 */

define([
  'exports',
  '@form-validation/core',
  '@form-validation/plugin-field-status',
], function (t, n, o) {
  'use strict';
  var i = function (t, n) {
    return (
      (i =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (t, n) {
            t.__proto__ = n;
          }) ||
        function (t, n) {
          for (var o in n)
            Object.prototype.hasOwnProperty.call(n, o) && (t[o] = n[o]);
        }),
      i(t, n)
    );
  };
  var e = (function (t) {
    function n(n) {
      var o = t.call(this, n) || this;
      return (
        (o.fieldStatusPluginName = '___autoFocusFieldStatus'),
        (o.opts = Object.assign({}, { onPrefocus: function () {} }, n)),
        (o.invalidFormHandler = o.onFormInvalid.bind(o)),
        o
      );
    }
    return (
      (function (t, n) {
        if ('function' != typeof n && null !== n)
          throw new TypeError(
            'Class extends value ' +
              String(n) +
              ' is not a constructor or null',
          );
        function o() {
          this.constructor = t;
        }
        i(t, n),
          (t.prototype =
            null === n
              ? Object.create(n)
              : ((o.prototype = n.prototype), new o()));
      })(n, t),
      (n.prototype.install = function () {
        this.core
          .on('core.form.invalid', this.invalidFormHandler)
          .registerPlugin(this.fieldStatusPluginName, new o.FieldStatus());
      }),
      (n.prototype.uninstall = function () {
        this.core
          .off('core.form.invalid', this.invalidFormHandler)
          .deregisterPlugin(this.fieldStatusPluginName);
      }),
      (n.prototype.onFormInvalid = function () {
        var t = this.core.getPlugin(this.fieldStatusPluginName).getStatuses(),
          n = Object.keys(this.core.getFields()).filter(function (n) {
            return 'Invalid' === t.get(n);
          });
        if (n.length > 0) {
          var o = n[0],
            i = this.core.getElements(o);
          if (i.length > 0) {
            var e = i[0],
              r = { firstElement: e, field: o };
            this.core.emit('plugins.autofocus.prefocus', r),
              this.opts.onPrefocus(r),
              e.focus();
          }
        }
      }),
      n
    );
  })(n.Plugin);
  t.AutoFocus = e;
});
