/**
 * FormValidation (https://formvalidation.io)
 * The best validation library for JavaScript
 * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>
 *
 * @license https://formvalidation.io/license
 * @package @form-validation/validator-numeric
 * @version 2.0.2
 */

!(function (a, t) {
  'object' == typeof exports && 'undefined' != typeof module
    ? (module.exports = t())
    : 'function' == typeof define && define.amd
      ? define(t)
      : (((a =
          'undefined' != typeof globalThis
            ? globalThis
            : a || self).FormValidation = a.FormValidation || {}),
        (a.FormValidation.validators = a.FormValidation.validators || {}),
        (a.FormValidation.validators.numeric = t()));
})(this, function () {
  'use strict';
  return function () {
    return {
      validate: function (a) {
        if ('' === a.value) return { valid: !0 };
        var t = Object.assign(
            {},
            { decimalSeparator: '.', thousandsSeparator: '' },
            a.options,
          ),
          e = ''.concat(a.value);
        e.substr(0, 1) === t.decimalSeparator
          ? (e = '0'.concat(t.decimalSeparator).concat(e.substr(1)))
          : e.substr(0, 2) === '-'.concat(t.decimalSeparator) &&
            (e = '-0'.concat(t.decimalSeparator).concat(e.substr(2)));
        var o = '.' === t.decimalSeparator ? '\\.' : t.decimalSeparator,
          r = '.' === t.thousandsSeparator ? '\\.' : t.thousandsSeparator,
          i = new RegExp(
            '^-?[0-9]{1,3}('.concat(r, '[0-9]{3})*(').concat(o, '[0-9]+)?$'),
          ),
          n = new RegExp(r, 'g');
        if (!i.test(e)) return { valid: !1 };
        r && (e = e.replace(n, '')), o && (e = e.replace(o, '.'));
        var c = parseFloat(e);
        return { valid: !isNaN(c) && isFinite(c) };
      },
    };
  };
});
