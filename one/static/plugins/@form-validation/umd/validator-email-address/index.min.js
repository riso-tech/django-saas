/**
 * FormValidation (https://formvalidation.io)
 * The best validation library for JavaScript
 * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>
 *
 * @license https://formvalidation.io/license
 * @package @form-validation/validator-email-address
 * @version 2.0.2
 */

!(function (a, e) {
  'object' == typeof exports && 'undefined' != typeof module
    ? (module.exports = e())
    : 'function' == typeof define && define.amd
      ? define(e)
      : (((a =
          'undefined' != typeof globalThis
            ? globalThis
            : a || self).FormValidation = a.FormValidation || {}),
        (a.FormValidation.validators = a.FormValidation.validators || {}),
        (a.FormValidation.validators.emailAddress = e()));
})(this, function () {
  'use strict';
  var a =
      /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,
    e =
      /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/;
  return function () {
    return {
      validate: function (i) {
        if ('' === i.value) return { valid: !0 };
        var t = Object.assign(
            {},
            { multiple: !1, requireGlobalDomain: !1, separator: /[,;]/ },
            i.options,
          ),
          r = t.requireGlobalDomain ? e : a;
        if (!0 === t.multiple || 'true' === ''.concat(t.multiple)) {
          for (
            var o = t.separator || /[,;]/,
              l = (function (a, e) {
                for (
                  var i = a.split(/"/), t = i.length, r = [], o = '', l = 0;
                  l < t;
                  l++
                )
                  if (l % 2 == 0) {
                    var n = i[l].split(e),
                      s = n.length;
                    if (1 === s) o += n[0];
                    else {
                      r.push(o + n[0]);
                      for (var u = 1; u < s - 1; u++) r.push(n[u]);
                      o = n[s - 1];
                    }
                  } else (o += '"' + i[l]), l < t - 1 && (o += '"');
                return r.push(o), r;
              })(i.value, o),
              n = l.length,
              s = 0;
            s < n;
            s++
          )
            if (!r.test(l[s])) return { valid: !1 };
          return { valid: !0 };
        }
        return { valid: r.test(i.value) };
      },
    };
  };
});
