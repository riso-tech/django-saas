/**
 * FormValidation (https://formvalidation.io)
 * The best validation library for JavaScript
 * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>
 *
 * @license https://formvalidation.io/license
 * @package @form-validation/plugin-auto-focus
 * @version 2.0.2
 */

!(function (t, i) {
  'object' == typeof exports && 'undefined' != typeof module
    ? (module.exports = i(
        require('@form-validation/core'),
        require('@form-validation/plugin-field-status'),
      ))
    : 'function' == typeof define && define.amd
      ? define(
          ['@form-validation/core', '@form-validation/plugin-field-status'],
          i,
        )
      : (((t =
          'undefined' != typeof globalThis
            ? globalThis
            : t || self).FormValidation = t.FormValidation || {}),
        (t.FormValidation.plugins = t.FormValidation.plugins || {}),
        (t.FormValidation.plugins.AutoFocus = i(
          t.FormValidation,
          t.FormValidation.plugins,
        )));
})(this, function (t, i) {
  'use strict';
  var o = function (t, i) {
    return (
      (o =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (t, i) {
            t.__proto__ = i;
          }) ||
        function (t, i) {
          for (var o in i)
            Object.prototype.hasOwnProperty.call(i, o) && (t[o] = i[o]);
        }),
      o(t, i)
    );
  };
  return (function (t) {
    function n(i) {
      var o = t.call(this, i) || this;
      return (
        (o.fieldStatusPluginName = '___autoFocusFieldStatus'),
        (o.opts = Object.assign({}, { onPrefocus: function () {} }, i)),
        (o.invalidFormHandler = o.onFormInvalid.bind(o)),
        o
      );
    }
    return (
      (function (t, i) {
        if ('function' != typeof i && null !== i)
          throw new TypeError(
            'Class extends value ' +
              String(i) +
              ' is not a constructor or null',
          );
        function n() {
          this.constructor = t;
        }
        o(t, i),
          (t.prototype =
            null === i
              ? Object.create(i)
              : ((n.prototype = i.prototype), new n()));
      })(n, t),
      (n.prototype.install = function () {
        this.core
          .on('core.form.invalid', this.invalidFormHandler)
          .registerPlugin(this.fieldStatusPluginName, new i.FieldStatus());
      }),
      (n.prototype.uninstall = function () {
        this.core
          .off('core.form.invalid', this.invalidFormHandler)
          .deregisterPlugin(this.fieldStatusPluginName);
      }),
      (n.prototype.onFormInvalid = function () {
        var t = this.core.getPlugin(this.fieldStatusPluginName).getStatuses(),
          i = Object.keys(this.core.getFields()).filter(function (i) {
            return 'Invalid' === t.get(i);
          });
        if (i.length > 0) {
          var o = i[0],
            n = this.core.getElements(o);
          if (n.length > 0) {
            var e = n[0],
              r = { firstElement: e, field: o };
            this.core.emit('plugins.autofocus.prefocus', r),
              this.opts.onPrefocus(r),
              e.focus();
          }
        }
      }),
      n
    );
  })(t.Plugin);
});
