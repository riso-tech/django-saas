/**
 * FormValidation (https://formvalidation.io)
 * The best validation library for JavaScript
 * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>
 *
 * @license https://formvalidation.io/license
 * @package @form-validation/plugin-international-telephone-input
 * @version 2.0.2
 */

!(function (e, t) {
  'object' == typeof exports && 'undefined' != typeof module
    ? (module.exports = t(require('@form-validation/core')))
    : 'function' == typeof define && define.amd
      ? define(['@form-validation/core'], t)
      : (((e =
          'undefined' != typeof globalThis
            ? globalThis
            : e || self).FormValidation = e.FormValidation || {}),
        (e.FormValidation.plugins = e.FormValidation.plugins || {}),
        (e.FormValidation.plugins.InternationalTelephoneInput = t(
          e.FormValidation,
        )));
})(this, function (e) {
  'use strict';
  var t = function (e, n) {
    return (
      (t =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (e, t) {
            e.__proto__ = t;
          }) ||
        function (e, t) {
          for (var n in t)
            Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
        }),
      t(e, n)
    );
  };
  return (function (e) {
    function n(t) {
      var n = e.call(this, t) || this;
      return (
        (n.intlTelInstances = new Map()),
        (n.countryChangeHandler = new Map()),
        (n.fieldElements = new Map()),
        (n.opts = Object.assign(
          {},
          { autoPlaceholder: 'polite', utilsScript: '' },
          t,
        )),
        (n.validatePhoneNumber = n.checkPhoneNumber.bind(n)),
        (n.fields =
          'string' == typeof n.opts.field
            ? n.opts.field.split(',')
            : n.opts.field),
        n
      );
    }
    return (
      (function (e, n) {
        if ('function' != typeof n && null !== n)
          throw new TypeError(
            'Class extends value ' +
              String(n) +
              ' is not a constructor or null',
          );
        function o() {
          this.constructor = e;
        }
        t(e, n),
          (e.prototype =
            null === n
              ? Object.create(n)
              : ((o.prototype = n.prototype), new o()));
      })(n, e),
      (n.prototype.install = function () {
        var e = this;
        this.core.registerValidator(
          n.INT_TEL_VALIDATOR,
          this.validatePhoneNumber,
        ),
          this.fields.forEach(function (t) {
            var o;
            e.core.addField(t, {
              validators:
                ((o = {}),
                (o[n.INT_TEL_VALIDATOR] = { message: e.opts.message }),
                o),
            });
            var i = e.core.getElements(t)[0],
              r = function () {
                return e.core.revalidateField(t);
              };
            i.addEventListener('countrychange', r),
              e.countryChangeHandler.set(t, r),
              e.fieldElements.set(t, i),
              e.intlTelInstances.set(t, intlTelInput(i, e.opts));
          });
      }),
      (n.prototype.uninstall = function () {
        var e = this;
        this.fields.forEach(function (t) {
          var o = e.countryChangeHandler.get(t),
            i = e.fieldElements.get(t),
            r = e.getIntTelInstance(t);
          o &&
            i &&
            r &&
            (i.removeEventListener('countrychange', o),
            e.core.disableValidator(t, n.INT_TEL_VALIDATOR),
            r.destroy());
        });
      }),
      (n.prototype.getIntTelInstance = function (e) {
        return this.intlTelInstances.get(e);
      }),
      (n.prototype.checkPhoneNumber = function () {
        var e = this;
        return {
          validate: function (t) {
            var n = t.value,
              o = e.getIntTelInstance(t.field);
            return '' !== n && o ? { valid: o.isValidNumber() } : { valid: !0 };
          },
        };
      }),
      (n.INT_TEL_VALIDATOR = '___InternationalTelephoneInputValidator'),
      n
    );
  })(e.Plugin);
});
