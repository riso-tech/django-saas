/**
 * FormValidation (https://formvalidation.io)
 * The best validation library for JavaScript
 * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>
 *
 * @license https://formvalidation.io/license
 * @package @form-validation/plugin-excluded
 * @version 2.0.2
 */

!(function (t, e) {
  'object' == typeof exports && 'undefined' != typeof module
    ? (module.exports = e(require('@form-validation/core')))
    : 'function' == typeof define && define.amd
      ? define(['@form-validation/core'], e)
      : (((t =
          'undefined' != typeof globalThis
            ? globalThis
            : t || self).FormValidation = t.FormValidation || {}),
        (t.FormValidation.plugins = t.FormValidation.plugins || {}),
        (t.FormValidation.plugins.Excluded = e(t.FormValidation)));
})(this, function (t) {
  'use strict';
  var e = function (t, o) {
    return (
      (e =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (t, e) {
            t.__proto__ = e;
          }) ||
        function (t, e) {
          for (var o in e)
            Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
        }),
      e(t, o)
    );
  };
  return (function (t) {
    function o(e) {
      var i = t.call(this, e) || this;
      return (
        (i.opts = Object.assign({}, { excluded: o.defaultIgnore }, e)),
        (i.ignoreValidationFilter = i.ignoreValidation.bind(i)),
        i
      );
    }
    return (
      (function (t, o) {
        if ('function' != typeof o && null !== o)
          throw new TypeError(
            'Class extends value ' +
              String(o) +
              ' is not a constructor or null',
          );
        function i() {
          this.constructor = t;
        }
        e(t, o),
          (t.prototype =
            null === o
              ? Object.create(o)
              : ((i.prototype = o.prototype), new i()));
      })(o, t),
      (o.defaultIgnore = function (t, e, o) {
        var i = !!(
            e.offsetWidth ||
            e.offsetHeight ||
            e.getClientRects().length
          ),
          n = e.getAttribute('disabled');
        return (
          '' === n ||
          'disabled' === n ||
          'hidden' === e.getAttribute('type') ||
          !i
        );
      }),
      (o.prototype.install = function () {
        this.core.registerFilter(
          'element-ignored',
          this.ignoreValidationFilter,
        );
      }),
      (o.prototype.uninstall = function () {
        this.core.deregisterFilter(
          'element-ignored',
          this.ignoreValidationFilter,
        );
      }),
      (o.prototype.ignoreValidation = function (t, e, o) {
        return this.opts.excluded.apply(this, [t, e, o]);
      }),
      o
    );
  })(t.Plugin);
});
