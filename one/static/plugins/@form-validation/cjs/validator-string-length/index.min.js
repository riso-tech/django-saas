/**
 * FormValidation (https://formvalidation.io)
 * The best validation library for JavaScript
 * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>
 *
 * @license https://formvalidation.io/license
 * @package @form-validation/validator-string-length
 * @version 2.0.2
 */

'use strict';
var e = require('@form-validation/core').utils.format;
exports.stringLength = function () {
  return {
    validate: function (t) {
      var n = Object.assign(
          {},
          { message: '', trim: !1, utf8Bytes: !1 },
          t.options,
        ),
        s =
          !0 === n.trim || 'true' === ''.concat(n.trim)
            ? t.value.trim()
            : t.value;
      if ('' === s) return { valid: !0 };
      var a = n.min ? ''.concat(n.min) : '',
        r = n.max ? ''.concat(n.max) : '',
        i = n.utf8Bytes
          ? (function (e) {
              for (var t = e.length, n = e.length - 1; n >= 0; n--) {
                var s = e.charCodeAt(n);
                s > 127 && s <= 2047 ? t++ : s > 2047 && s <= 65535 && (t += 2),
                  s >= 56320 && s <= 57343 && n--;
              }
              return t;
            })(s)
          : s.length,
        g = !0,
        c = t.l10n ? n.message || t.l10n.stringLength.default : n.message;
      switch (
        (((a && i < parseInt(a, 10)) || (r && i > parseInt(r, 10))) && (g = !1),
        !0)
      ) {
        case !!a && !!r:
          c = e(t.l10n ? n.message || t.l10n.stringLength.between : n.message, [
            a,
            r,
          ]);
          break;
        case !!a:
          c = e(
            t.l10n ? n.message || t.l10n.stringLength.more : n.message,
            ''.concat(parseInt(a, 10)),
          );
          break;
        case !!r:
          c = e(
            t.l10n ? n.message || t.l10n.stringLength.less : n.message,
            ''.concat(parseInt(r, 10)),
          );
      }
      return { message: c, valid: g };
    },
  };
};
