/**
 * FormValidation (https://formvalidation.io)
 * The best validation library for JavaScript
 * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>
 *
 * @license https://formvalidation.io/license
 * @package @form-validation/validator-remote
 * @version 2.0.2
 */

'use strict';
var e = require('@form-validation/core').utils.fetch;
exports.remote = function () {
  var a = {
    crossDomain: !1,
    data: {},
    headers: {},
    method: 'GET',
    validKey: 'valid',
  };
  return {
    validate: function (r) {
      if ('' === r.value) return Promise.resolve({ valid: !0 });
      var t = Object.assign({}, a, r.options),
        i = t.data;
      'function' == typeof t.data && (i = t.data.call(this, r)),
        'string' == typeof i && (i = JSON.parse(i)),
        (i[t.name || r.field] = r.value);
      var o = 'function' == typeof t.url ? t.url.call(this, r) : t.url;
      return e(o, {
        crossDomain: t.crossDomain,
        headers: t.headers,
        method: t.method,
        params: i,
      })
        .then(function (e) {
          return Promise.resolve({
            message: e.message,
            meta: e,
            valid: 'true' === ''.concat(e[t.validKey]),
          });
        })
        .catch(function (e) {
          return Promise.reject({ valid: !1 });
        });
    },
  };
};
