/**
 * FormValidation (https://formvalidation.io)
 * The best validation library for JavaScript
 * (c) 2013 - 2023 Nguyen Huu Phuoc <me@phuoc.ng>
 *
 * @license https://formvalidation.io/license
 * @package @form-validation/plugin-mandatory-icon
 * @version 2.0.2
 */

'use strict';
var e = require('@form-validation/core'),
  t = function (e, n) {
    return (
      (t =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (e, t) {
            e.__proto__ = t;
          }) ||
        function (e, t) {
          for (var n in t)
            Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
        }),
      t(e, n)
    );
  };
var n = e.utils.classSet,
  i = (function (e) {
    function i(t) {
      var n = e.call(this, t) || this;
      return (
        (n.removedIcons = {
          Invalid: '',
          NotValidated: '',
          Valid: '',
          Validating: '',
        }),
        (n.icons = new Map()),
        (n.elementValidatingHandler = n.onElementValidating.bind(n)),
        (n.elementValidatedHandler = n.onElementValidated.bind(n)),
        (n.elementNotValidatedHandler = n.onElementNotValidated.bind(n)),
        (n.iconPlacedHandler = n.onIconPlaced.bind(n)),
        (n.iconSetHandler = n.onIconSet.bind(n)),
        n
      );
    }
    return (
      (function (e, n) {
        if ('function' != typeof n && null !== n)
          throw new TypeError(
            'Class extends value ' +
              String(n) +
              ' is not a constructor or null',
          );
        function i() {
          this.constructor = e;
        }
        t(e, n),
          (e.prototype =
            null === n
              ? Object.create(n)
              : ((i.prototype = n.prototype), new i()));
      })(i, e),
      (i.prototype.install = function () {
        this.core
          .on('core.element.validating', this.elementValidatingHandler)
          .on('core.element.validated', this.elementValidatedHandler)
          .on('core.element.notvalidated', this.elementNotValidatedHandler)
          .on('plugins.icon.placed', this.iconPlacedHandler)
          .on('plugins.icon.set', this.iconSetHandler);
      }),
      (i.prototype.uninstall = function () {
        this.icons.clear(),
          this.core
            .off('core.element.validating', this.elementValidatingHandler)
            .off('core.element.validated', this.elementValidatedHandler)
            .off('core.element.notvalidated', this.elementNotValidatedHandler)
            .off('plugins.icon.placed', this.iconPlacedHandler)
            .off('plugins.icon.set', this.iconSetHandler);
      }),
      (i.prototype.onIconPlaced = function (e) {
        var t,
          i = this,
          o = this.core.getFields()[e.field].validators,
          a = this.core.getElements(e.field);
        if (o && o.notEmpty && !1 !== o.notEmpty.enabled && a.length) {
          this.icons.set(e.element, e.iconElement);
          for (
            var l = a[0].getAttribute('type'),
              s = l ? l.toLowerCase() : '',
              d = 0,
              c = 'checkbox' === s || 'radio' === s ? [a[0]] : a;
            d < c.length;
            d++
          ) {
            var r = c[d];
            '' === this.core.getElementValue(e.field, r) &&
              n(e.iconElement, (((t = {})[this.opts.icon] = !0), t));
          }
        }
        this.iconClasses = e.classes;
        var p = this.opts.icon.split(' '),
          h = {
            Invalid: this.iconClasses.invalid
              ? this.iconClasses.invalid.split(' ')
              : [],
            Valid: this.iconClasses.valid
              ? this.iconClasses.valid.split(' ')
              : [],
            Validating: this.iconClasses.validating
              ? this.iconClasses.validating.split(' ')
              : [],
          };
        Object.keys(h).forEach(function (e) {
          for (var t = [], n = 0, o = p; n < o.length; n++) {
            var a = o[n];
            -1 === h[e].indexOf(a) && t.push(a);
          }
          i.removedIcons[e] = t.join(' ');
        });
      }),
      (i.prototype.onElementValidating = function (e) {
        this.updateIconClasses(e.element, 'Validating');
      }),
      (i.prototype.onElementValidated = function (e) {
        this.updateIconClasses(e.element, e.valid ? 'Valid' : 'Invalid');
      }),
      (i.prototype.onElementNotValidated = function (e) {
        this.updateIconClasses(e.element, 'NotValidated');
      }),
      (i.prototype.updateIconClasses = function (e, t) {
        var i,
          o = this.icons.get(e);
        o &&
          this.iconClasses &&
          (this.iconClasses.valid ||
            this.iconClasses.invalid ||
            this.iconClasses.validating) &&
          n(
            o,
            (((i = {})[this.removedIcons[t]] = !1),
            (i[this.opts.icon] = !1),
            i),
          );
      }),
      (i.prototype.onIconSet = function (e) {
        var t,
          i = this.icons.get(e.element);
        i &&
          (('NotValidated' === e.status &&
            '' === this.core.getElementValue(e.field, e.element)) ||
            'Ignored' === e.status) &&
          n(i, (((t = {})[this.opts.icon] = !0), t));
      }),
      i
    );
  })(e.Plugin);
exports.MandatoryIcon = i;
